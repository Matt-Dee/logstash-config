input {
  http {
    port => 6969
  }
}

filter {
  mutate {
    remove_field => [ "headers" ] 
    rename => { "type" => "metric_type" }
    lowercase => [ "name" ]
  }
}

output {
  if [name] == "fsopdurations" or [name] == "clustermetrics"  or [name] == "datanode"  or [name] == "fsnamesystem"  or [name] == "jvmmetrics"  or [name] == "metricssystem"  or [name] == "namenode"  or [name] == "nodemanagermetrics"  or [name] == "queuemetrics" or [name] == "retrycache.namenoderetrycache" or [name] == "rpc" or [name] == "rpcdetailed" or [name] == "shufflemetrics" or [name] == "startupprogress" or [name] == "ugimetrics" {
    
    stdout { codec => rubydebug }
    elasticsearch {
        hosts => ["localhost:9200"]
        manage_template => false
        index => "%{[name]}"
        flush_size => 10000
        idle_flush_time => 1
    }

    if [name] == "fsopdurations" {
        jdbc {
            driver_class => "org.mariadb.jdbc.Driver"
            driver_jar_path => "/opt/logstash/vendor/jar/jdbc/mariadb-java-client-1.4.6.jar"
            connection_string => "jdbc:mysql://localhost/hadoop_metrics?user=logstash&password=s0m3th1ng"
            max_pool_size => 10
            statement => [ "INSERT INTO fs_op_durations ( update_call_i_max_time, node_update_call_min_time, update_call_max_time, update_thread_run_i_min_time, continuous_scheduling_run_i_min_time, continuous_scheduling_run_i_num_ops, update_call_min_time, update_thread_run_min_time, preempt_call_avg_time, preempt_call_min_time, update_thread_run_stdev_time, update_call_avg_time, node_update_call_i_min_time, continuous_scheduling_run_num_ops, continuous_scheduling_run_i_max_time, node_update_call_num_ops, update_call_i_num_ops, node_update_call_avg_time, preempt_call_i_min_time, preempt_call_num_ops, node_update_call_i_max_time, update_thread_run_i_max_time, preempt_call_max_time, update_thread_run_max_time, update_thread_run_avg_time, node_update_call_stdev_time, update_thread_run_num_ops, update_call_stdev_time, preempt_call_i_max_time,  node_update_call_i_num_ops, continuous_scheduling_run_max_time, update_thread_run_i_num_ops, preempt_call_stdev_time, timestamp, update_call_i_min_time, update_call_num_ops, continuous_scheduling_run_min_time, continuous_scheduling_run_avg_time, node_update_call_max_time, continuous_scheduling_run_stdev_time, preempt_call_i_num_ops ) VALUES( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )", "UpdateCallIMaxTime", "NodeUpdateCallMinTime", "UpdateCallMaxTime", "UpdateThreadRunIMinTime", "ContinuousSchedulingRunIMinTime", "ContinuousSchedulingRunINumOps", "UpdateCallMinTime", "UpdateThreadRunMinTime", "PreemptCallAvgTime", "PreemptCallMinTime", "UpdateThreadRunStdevTime", "UpdateCallAvgTime", "NodeUpdateCallIMinTime", "ContinuousSchedulingRunNumOps", "ContinuousSchedulingRunIMaxTime", "NodeUpdateCallNumOps", "UpdateCallINumOps", "NodeUpdateCallAvgTime", "PreemptCallIMinTime", "PreemptCallNumOps", "NodeUpdateCallIMaxTime", "UpdateThreadRunIMaxTime", "PreemptCallMaxTime", "UpdateThreadRunMaxTime", "UpdateThreadRunAvgTime", "NodeUpdateCallStdevTime", "UpdateThreadRunNumOps", "UpdateCallStdevTime", "PreemptCallIMaxTime", "NodeUpdateCallINumOps", "ContinuousSchedulingRunMaxTime", "UpdateThreadRunINumOps", "PreemptCallStdevTime", "@timestamp", "UpdateCallIMinTime", "UpdateCallNumOps", "ContinuousSchedulingRunMinTime", "ContinuousSchedulingRunAvgTime", "NodeUpdateCallMaxTime", "ContinuousSchedulingRunStdevTime", "PreemptCallINumOps" ]
        }
    } else if [name] == "clustermetrics" {
        jdbc {
            driver_class => "org.mariadb.jdbc.Driver"
            driver_jar_path => "/opt/logstash/vendor/jar/jdbc/mariadb-java-client-1.4.6.jar"
            connection_string => "jdbc:mysql://localhost/hadoop_metrics?user=logstash&password=s0m3th1ng"
            max_pool_size => 10
            statement => [ "INSERT INTO cluster_metrics (num_unhealthy_nms, am_register_delay_num_ops, num_decommissioned_nms, num_active_nms, am_launch_delay_avg_time, timestamp, num_rebooted_nms, am_launch_delay_num_ops, am_register_delay_avg_time, num_lost_nms ) VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", "NumUnhealthyNMs", "AMRegisterDelayNumOps", "NumDecommissionedNMs", "NumActiveNMs", "AMLaunchDelayAvgTime", "@timestamp", "NumRebootedNMs", "AMLaunchDelayNumOps", "AMRegisterDelayAvgTime", "NumLostNMs" ]
        }
    } else if [name] == "datanode" {
        jdbc {
            driver_class => "org.mariadb.jdbc.Driver"
            driver_jar_path => "/opt/logstash/vendor/jar/jdbc/mariadb-java-client-1.4.6.jar"
            connection_string => "jdbc:mysql://localhost/hadoop_metrics?user=logstash&password=s0m3th1ng"
            max_pool_size => 10
            statement => [ "INSERT INTO data_node ( ram_disk_blocks_eviction_window_ms_avg_time, write_block_op_avg_time, blocks_removed, remote_bytes_written, block_checksum_op_num_ops, heartbeats_avg_time, fsync_count, read_block_op_avg_time, packet_ack_round_trip_time_nanos_avg_time, send_data_packet_transfer_nanos_num_ops, block_checksum_op_avg_time, writes_from_local_client, blocks_uncached, ram_disk_blocks_lazy_persist_window_ms_avg_time, blocks_replicated, packet_ack_round_trip_time_nanos_num_ops, copy_block_op_avg_time, blocks_read, ram_disk_blocks_read_hits, timestamp, cache_reports_avg_time, blocks_verified, replace_block_op_num_ops, heartbeats_num_ops, writes_from_remote_client, reads_from_remote_client, block_reports_avg_time, ram_disk_blocks_eviction_window_ms_num_ops, fsync_nanos_num_ops, replace_block_op_avg_time, total_write_time, reads_from_local_client, ram_disk_bytes_write, volume_failures, write_block_op_num_ops, blocks_written, ram_disk_blocks_deleted_before_lazy_persisted, copy_block_op_num_ops, total_read_time, ram_disk_blocks_write_fallback, flush_nanos_num_ops, blocks_cached, blocks_get_local_path_info, cache_reports_num_ops, send_data_packet_transfer_nanos_avg_time, bytes_read, ram_disk_blocks_write, incremental_block_reports_num_ops, flush_nanos_avg_time, ram_disk_blocks_evicted, datanode_network_errors, send_data_packet_blocked_on_network_nanos_num_opsd, ram_disk_blocks_lazy_persist_window_ms_num_ops, send_data_packet_blocked_on_network_nanos_avg_time, ram_disk_bytes_lazy_persisted, ram_disk_blocks_lazy_persisted, read_block_op_num_ops, block_verification_failures, remote_bytes_read, block_reports_num_ops, fsync_nanos_avg_time, bytes_written, ram_disk_blocks_evicted_without_read, incremental_block_reports_avg_time ) VALUES(?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", "RamDiskBlocksEvictionWindowMsAvgTime", "WriteBlockOpAvgTime", "BlocksRemoved", "RemoteBytesWritten", "BlockChecksumOpNumOps", "HeartbeatsAvgTime", "FsyncCount", "ReadBlockOpAvgTime", "PacketAckRoundTripTimeNanosAvgTime", "SendDataPacketTransferNanosNumOps", "BlockChecksumOpAvgTime", "WritesFromLocalClient", "BlocksUncached", "RamDiskBlocksLazyPersistWindowMsAvgTime", "BlocksReplicated", "PacketAckRoundTripTimeNanosNumOps", "CopyBlockOpAvgTime", "BlocksRead", "RamDiskBlocksReadHits", "@timestamp", "CacheReportsAvgTime", "BlocksVerified", "ReplaceBlockOpNumOps", "HeartbeatsNumOps", "WritesFromRemoteClient", "ReadsFromRemoteClient", "BlockReportsAvgTime", "RamDiskBlocksEvictionWindowMsNumOps", "FsyncNanosNumOps", "ReplaceBlockOpAvgTime", "TotalWriteTime", "ReadsFromLocalClient", "RamDiskBytesWrite", "VolumeFailures", "WriteBlockOpNumOps", "BlocksWritten", "RamDiskBlocksDeletedBeforeLazyPersisted", "CopyBlockOpNumOps", "TotalReadTime", "RamDiskBlocksWriteFallback", "FlushNanosNumOps", "BlocksCached", "BlocksGetLocalPathInfo", "CacheReportsNumOps", "SendDataPacketTransferNanosAvgTime", "BytesRead", "RamDiskBlocksWrite", "IncrementalBlockReportsNumOps", "FlushNanosAvgTime", "RamDiskBlocksEvicted", "DatanodeNetworkErrors", "SendDataPacketBlockedOnNetworkNanosNumOps", "RamDiskBlocksLazyPersistWindowMsNumOps", "SendDataPacketBlockedOnNetworkNanosAvgTime", "RamDiskBytesLazyPersisted", "RamDiskBlocksLazyPersisted", "ReadBlockOpNumOps", "BlockVerificationFailures", "RemoteBytesRead", "BlockReportsNumOps", "FsyncNanosAvgTime", "BytesWritten", "RamDiskBlocksEvictedWithoutRead", "IncrementalBlockReportsAvgTime" ]
        }
    } else if [name] == "fsnamesystem" {
        jdbc {
            driver_class => "org.mariadb.jdbc.Driver"
            driver_jar_path => "/opt/logstash/vendor/jar/jdbc/mariadb-java-client-1.4.6.jar"
            connection_string => "jdbc:mysql://localhost/hadoop_metrics?user=logstash&password=s0m3th1ng"
            max_pool_size => 10
            statement => [ "INSERT INTO fs_name_system (capacity_used, excess_blocks, pending_replication_blocks, files_total, capacity_used_non_dfs, capacity_remaining_gb, capacity_remaining, total_load, transactions_since_last_checkpoint, pending_deletion_blocks, last_checkpoint_time, block_capacity, scheduled_replication_blocks, blocks_total, capacity_total_gb, capacity_used_gb, expired_heartbeats, total_files, stale_data_nodes, postponed_misreplicated_blocks, transactions_since_last_log_roll, missing_blocks, pending_data_node_message_count, millis_since_last_loaded_edits, timestamp, last_written_transaction_id, snapshottable_directories, missing_repl_one_blocks, under_replicated_blocks, snapshots, capacity_total, corrupt_blocks) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", "CapacityUsed", "ExcessBlocks", "PendingReplicationBlocks", "FilesTotal", "CapacityUsedNonDFS", "CapacityRemainingGB", "CapacityRemaining", "TotalLoad", "TransactionsSinceLastCheckpoint", "PendingDeletionBlocks", "LastCheckpointTime", "BlockCapacity", "ScheduledReplicationBlocks", "BlocksTotal", "CapacityTotalGB", "CapacityUsedGB", "ExpiredHeartbeats", "TotalFiles", "StaleDataNodes", "PostponedMisreplicatedBlocks", "TransactionsSinceLastLogRoll", "MissingBlocks", "PendingDataNodeMessageCount", "MillisSinceLastLoadedEdits", "@timestamp", "LastWrittenTransactionId", "SnapshottableDirectories", "MissingReplOneBlocks", "UnderReplicatedBlocks", "Snapshots", "CapacityTotal", "CorruptBlocks" ]
        }
    } else if [name] == "jvmmetrics" {
        jdbc {
            driver_class => "org.mariadb.jdbc.Driver"
            driver_jar_path => "/opt/logstash/vendor/jar/jdbc/mariadb-java-client-1.4.6.jar"
            connection_string => "jdbc:mysql://localhost/hadoop_metrics?user=logstash&password=s0m3th1ng"
            max_pool_size => 10
            statement => [ "INSERT INTO jvm_metrics (log_error, threads_terminated, gc_account, log_fatal, gc_count_ps_mark_sweep, gc_time_millis, log_warn, gc_count_ps_scavenge, threads_blocked, mem_heap_committed_m, mem_non_heap_used_m, threads_runnable, gc_time_millis_ps_scavenge, mem_non_heap_committed_m, gc_time_millis_ps_mark_sweep, mem_heap_max_m, log_info, threads_new, mem_heap_used_m, threads_waiting, mem_non_heap_max_m, mem_max_m, threads_timed_waiting,timestamp) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)","LogError", "ThreadsTerminated", "GcCount", "LogFatal", "GcCountPS MarkSweep", "GcTimeMillis", "LogWarn", "GcCountPS Scavenge", "ThreadsBlocked", "MemHeapCommittedM", "MemNonHeapUsedM", "ThreadsRunnable", "GcTimeMillisPS Scavenge", "MemNonHeapCommittedM", "GcTimeMillisPS MarkSweep", "MemHeapMaxM", "LogInfo", "ThreadsNew", "MemHeapUsedM", "ThreadsWaiting", "MemNonHeapMaxM", "MemMaxM", "ThreadsTimedWaiting", "@timestamp" ]
        }
    } else if [name] == "metricssystem" {
        jdbc {
            driver_class => "org.mariadb.jdbc.Driver"
            driver_jar_path => "/opt/logstash/vendor/jar/jdbc/mariadb-java-client-1.4.6.jar"
            connection_string => "jdbc:mysql://localhost/hadoop_metrics?user=logstash&password=s0m3th1ng"
            max_pool_size => 10
            statement => [ "INSERT INTO metrics_system (num_all_sources, sink_logstash_num_ops, publish_num_ops, sink_logstash_q_size, num_active_sources, publish_avg_time, timestamp,sink_logstash_avg_time, sink_logstash_dropped, snapshot_avg_time, num_active_sink, dropped_pub_all, snapshot_num_ops, num_all_sinks ) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?)", "NumAllSources","Sink_logstashNumOps", "PublishNumOps", "Sink_logstashQsize", "NumActiveSources", "PublishAvgTime", "@timestamp", "Sink_logstashAvgTime", "Sink_logstashDropped", "SnapshotAvgTime", "NumActiveSinks", "DroppedPubAll", "SnapshotNumOps", "NumAllSinks" ]
        }
    } else if [name] == "namenode" {
        jdbc {
            driver_class => "org.mariadb.jdbc.Driver"
            driver_jar_path => "/opt/logstash/vendor/jar/jdbc/mariadb-java-client-1.4.6.jar"
            connection_string => "jdbc:mysql://localhost/hadoop_metrics?user=logstash&password=s0m3th1ng"
            max_pool_size => 10
            statement => [ "INSERT INTO name_node (list_snapshot_table_dir_ops, put_image_num_ops, allow_snapshot_ops, transactions_num_ops, cache_report_num_ops, sync_savg_time, get_additional_datanode_ops, rename_snapshot_ops, create_file_ops, get_listing_ops, syncs_num_ops, get_block_locations, files_in_get_listing_ops, storage_block_report_ops, safe_mode_time, files_created, delete_file_ops, get_edit_num_ops, cache_report_avg_time, delete_snapshot_ops, add_block_ops, files_renamed, get_image_num_ops, transactions_batched_in_sync, block_report_avg_time, create_snapshot_ops, get_edit_avg_time, file_info_ops, block_report_num_ops, get_image_avg_time, put_image_avg_time, timestamp, disallow_snapshot_ops, block_received_and_deleted_ops, transactions_avg_time, create_symlink_ops, total_file_ops, files_deleted, get_link_target_ops, fs_image_load_time, files_appended, snapshot_diff_report_ops ) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", "ListSnapshottableDirOps", "PutImageNumOps", "AllowSnapshotOps", "TransactionsNumOps", "CacheReportNumOps", "SyncsAvgTime", "GetAdditionalDatanodeOps", "RenameSnapshotOps", "CreateFileOps", "GetListingOps", "SyncsNumOps", "GetBlockLocations", "FilesInGetListingOps", "StorageBlockReportOps", "SafeModeTime", "FilesCreated", "DeleteFileOps", "GetEditNumOps", "CacheReportAvgTime", "DeleteSnapshotOps", "AddBlockOps", "FilesRenamed", "GetImageNumOps", "TransactionsBatchedInSync", "BlockReportAvgTime", "CreateSnapshotOps", "GetEditAvgTime", "FileInfoOps", "BlockReportNumOps", "GetImageAvgTime", "PutImageAvgTime", "@timestamp", "DisallowSnapshotOps", "BlockReceivedAndDeletedOps", "TransactionsAvgTime", "CreateSymlinkOps", "TotalFileOps", "FilesDeleted", "GetLinkTargetOps", "FsImageLoadTime", "FilesAppended", "SnapshotDiffReportOps"  ]
        }
    } else if [name] == "nodemanagermetrics" {
        jdbc {
            driver_class => "org.mariadb.jdbc.Driver"
            driver_jar_path => "/opt/logstash/vendor/jar/jdbc/mariadb-java-client-1.4.6.jar"
            connection_string => "jdbc:mysql://localhost/hadoop_metrics?user=logstash&password=s0m3th1ng"
            max_pool_size => 10
            statement => [ "INSERT INTO node_manager_metrics (allocated_containers, allocated_gb, containers_launched, available_v_cores, containers_running, timestamp,available_gb, containers_killed, containers_initing, containers_failed, container_launch_duration_num_ops, containers_completed, allocated_v_cores, container_launch_duration_avg_time ) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?)", "AllocatedContainers", "AllocatedGB", "ContainersLaunched", "AvailableVCores", "ContainersRunning", "@timestamp", "AvailableGB", "ContainersKilled", "ContainersIniting", "ContainersFailed", "ContainerLaunchDurationNumOps", "ContainersCompleted", "AllocatedVCores", "ContainerLaunchDurationAvgTime" ]
        }
    } else if [name] == "queuemetrics" {
        jdbc {
            driver_class => "org.mariadb.jdbc.Driver"
            driver_jar_path => "/opt/logstash/vendor/jar/jdbc/mariadb-java-client-1.4.6.jar"
            connection_string => "jdbc:mysql://localhost/hadoop_metrics?user=logstash&password=s0m3th1ng"
            max_pool_size => 10
            statement => [ "INSERT INTO queue_metrics (apps_failed, apps_completed, min_share_mb, apps_killed, active_applications, running_300, steady_fair_share_mb, pending_mb, running_60, reserved_mb, pending_containers, available_mb, allocated_mb, allocated_containers, max_share_v_cores, running_0, running_1440, active_users, pending_v_cores, steady_fair_share_v_cores, available_v_cores, max_share_mb, aafca_delay_num_ops, apps_running, agg_containers_released,timestamp, min_share_v_cores, aafca_delay_avg_time, reserved_v_cores, reserved_containers, apps_submitted, apps_pending, allocated_v_cores, aggregate_containers_allocated, fair_share_mb, fair_share_v_cores ) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", "AppsFailed", "AppsCompleted", "MinShareMB", "AppsKilled", "ActiveApplications", "running_300", "SteadyFairShareMB", "PendingMB", "running_60","ReservedMB", "PendingContainers", "AvailableMB", "AllocatedMB", "AllocatedContainers", "MaxShareVCores", "running_0", "running_1440", "ActiveUsers", "PendingVCores", "SteadyFairShareVCores", "AvailableVCores", "MaxShareMB", "AppAttemptFirstContainerAllocationDelayNumOps", "AppsRunning", "AggregateContainersReleased", "@timestamp", "MinShareVCores", "AppAttemptFirstContainerAllocationDelayAvgTime", "ReservedVCores", "ReservedContainers", "AppsSubmitted", "AppsPending", "AllocatedVCores", "AggregateContainersAllocated", "FairShareMB", "FairShareVCores" ]
        }
    } else if [name] == "retrycache.namenoderetrycache" {
        jdbc {
            driver_class => "org.mariadb.jdbc.Driver"
            driver_jar_path => "/opt/logstash/vendor/jar/jdbc/mariadb-java-client-1.4.6.jar"
            connection_string => "jdbc:mysql://localhost/hadoop_metrics?user=logstash&password=s0m3th1ng"
            max_pool_size => 10
            statement => [ "INSERT INTO name_node_retry_cache (cache_hit, timestamp, cache_updated, cache_cleared  ) VALUES(?,?,?,?)", "CacheHit", "@timestamp", "CacheUpdated", "CacheCleared"  ]
        }
    } else if [name] == "rpc" {
        jdbc {
            driver_class => "org.mariadb.jdbc.Driver"
            driver_jar_path => "/opt/logstash/vendor/jar/jdbc/mariadb-java-client-1.4.6.jar"
            connection_string => "jdbc:mysql://localhost/hadoop_metrics?user=logstash&password=s0m3th1ng"
            max_pool_size => 10
            statement => [ "INSERT INTO rpc (call_queue_length, received_bytes, rpc_authorization_successes, rpc_client_backoff, rpc_authentication_successes, rpc_queue_time_avg_time, rpc_authentication_failures, rpc_processing_time_avg_time, timestamp, sent_bytes, rpc_authorization_failures, num_open_connections, rpc_queue_time_num_ops, rpc_processing_time_num_ops) VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", "CallQueueLength", "ReceivedBytes", "RpcAuthorizationSuccesses", "RpcClientBackoff", "RpcAuthenticationSuccesses", "RpcQueueTimeAvgTime", "RpcAuthenticationFailures", "RpcProcessingTimeAvgTime", "@timestamp", "SentBytes", "RpcAuthorizationFailures", "NumOpenConnections", "RpcQueueTimeNumOps", "RpcProcessingTimeNumOps" ]
        }
    } else if [name] == "rpcdetailed" {
        if [metric_type] == "namenode-metrics" {
            if [port] == 8020 {
                jdbc {
                    driver_class => "org.mariadb.jdbc.Driver"
                    driver_jar_path => "/opt/logstash/vendor/jar/jdbc/mariadb-java-client-1.4.6.jar"
                    connection_string => "jdbc:mysql://localhost/hadoop_metrics?user=logstash&password=s0m3th1ng"
                    max_pool_size => 10
                    statement => [ "INSERT INTO namenode_metrics (set_times_num_ops, renew_lease_avg_time, fsync_num_ops, fsync_avg_time, create_avg_time, get_block_locations_num_ops, delete_avg_time, set_safe_mode_avg_time, get_file_info_avg_time, add_block_num_ops, get_server_defaults_avg_time, create_num_ops, add_block_avg_time, delete_num_ops, get_block_locations_avg_time, complete_avg_time, settimes_avg_time, rename_avg_time, mkdirs_avg_time, mkdirs_num_ops, rename_num_ops, get_listing_num_ops, complete_num_ops, timestamp, set_safe_mode_num_ops, get_file_info_num_ops, get_server_defaults_num_ops, renew_lease_num_ops, get_listing_avg_time ) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", "SetTimesNumOps","RenewLeaseAvgTime", "FsyncNumOps", "FsyncAvgTime", "CreateAvgTime", "GetBlockLocationsNumOps", "DeleteAvgTime", "SetSafeModeAvgTime", "GetFileInfoAvgTime", "AddBlockNumOps", "GetServerDefaultsAvgTime", "CreateNumOps", "AddBlockAvgTime", "DeleteNumOps", "GetBlockLocationsAvgTime", "CompleteAvgTime", "SetTimesAvgTime", "RenameAvgTime", "MkdirsAvgTime", "MkdirsNumOps", "RenameNumOps", "GetListingNumOps", "CompleteNumOps", "@timestamp", "SetSafeModeNumOps", "GetFileInfoNumOps", "GetServerDefaultsNumOps", "RenewLeaseNumOps", "GetListingAvgTime" ]
                }
            }
            if [port] == 8022 {
                jdbc {
                    driver_class => "org.mariadb.jdbc.Driver"
                    driver_jar_path => "/opt/logstash/vendor/jar/jdbc/mariadb-java-client-1.4.6.jar"
                    connection_string => "jdbc:mysql://localhost/hadoop_metrics?user=logstash&password=s0m3th1ng"
                    max_pool_size => 10
                    statement => [ "INSERT INTO namenode_metrics_more (blockreceivedanddeletednumops, registerdatanodenumops, blockreportavgtime, gettransactionidnumops, versionrequestavgtime, rolleditlognumops, blockreportnumops, registerdatanodeavgtime, sendheartbeatavgtime, timestamp, geteditlogmanifestavgtime, versionrequestnumops, gettransactionidavgtime, geteditlogmanifestnumops, sendheartbeatnumops, rolleditlogavgtime, blockreceivedanddeletedavgtime) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)","BlockReceivedAndDeletedNumOps", "RegisterDatanodeNumOps", "BlockReportAvgTime", "GetTransactionIdNumOps", "VersionRequestAvgTime", "RollEditLogNumOps", "BlockReportNumOps", "RegisterDatanodeAvgTime", "SendHeartbeatAvgTime", "@timestamp", "GetEditLogManifestAvgTime", "VersionRequestNumOps", "GetTransactionIdAvgTime", "GetEditLogManifestNumOps", "SendHeartbeatNumOps", "RollEditLogAvgTime", "BlockReceivedAndDeletedAvgTime" ]
                }
            }
        }
    } else if [name] == "shufflemetrics" {
        jdbc {
            driver_class => "org.mariadb.jdbc.Driver"
            driver_jar_path => "/opt/logstash/vendor/jar/jdbc/mariadb-java-client-1.4.6.jar"
            connection_string => "jdbc:mysql://localhost/hadoop_metrics?user=logstash&password=s0m3th1ng"
            max_pool_size => 10
            statement => [ "INSERT INTO shuffle_metrics (shuffle_output_bytes, shuffle_connections, shuffle_outputs_ok, shuffle_outputs_failed,timestamp ) VALUES(?,?,?,?,?)","ShuffleOutputBytes","ShuffleConnections","ShuffleOutputsOK","ShuffleOutputsFailed","@timestamp" ]
        }
    } else if [name] == "startupprogress" {
        jdbc {
            driver_class => "org.mariadb.jdbc.Driver"
            driver_jar_path => "/opt/logstash/vendor/jar/jdbc/mariadb-java-client-1.4.6.jar"
            connection_string => "jdbc:mysql://localhost/hadoop_metrics?user=logstash&password=s0m3th1ng"
            max_pool_size => 10
            statement => [ "INSERT INTO startup_progress (loading_edits_percent_complete, percent_complete, loading_edits_total, safe_mode_percent_complete, safe_mode_elapsed_time, saving_checkpoint_percent_complete, saving_checkpoint_count, safe_mode_count, saving_checkpoint_elapsed_time, loading_fs_image_count, loading_fs_image_percent_complete, loading_edits_count, loading_fs_image_total, elapsed_time, loading_edits_elapsed_time, safe_mode_total, loading_fs_image_elapsed_time, saving_checkpoint_total,timestamp ) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)","LoadingEditsPercentComplete", "PercentComplete", "LoadingEditsTotal", "SafeModePercentComplete", "SafeModeElapsedTime", "SavingCheckpointPercentComplete", "SavingCheckpointCount", "SafeModeCount", "SavingCheckpointElapsedTime", "LoadingFsImageCount", "LoadingFsImagePercentComplete", "LoadingEditsCount", "LoadingFsImageTotal", "ElapsedTime", "LoadingEditsElapsedTime", "SafeModeTotal","LoadingFsImageElapsedTime","SavingCheckpointTotal","@timestamp"]
        }
    } else if [name] == "ugimetrics" {
        jdbc {
            driver_class => "org.mariadb.jdbc.Driver"
            driver_jar_path => "/opt/logstash/vendor/jar/jdbc/mariadb-java-client-1.4.6.jar"
            connection_string => "jdbc:mysql://localhost/hadoop_metrics?user=logstash&password=s0m3th1ng"
            max_pool_size => 10
            statement => [ "INSERT INTO ugi_metrics (get_groups_num_ops, login_failure_avg_time, login_failure_num_ops, get_groups_avg_time, login_success_num_ops, login_success_avg_time, timestamp ) VALUES(?,?,?,?,?,?,?)","GetGroupsNumOps","LoginFailureAvgTime","LoginFailureNumOps","GetGroupsAvgTime","LoginSuccessNumOps","LoginSuccessAvgTime","@timestamp"]
        }
    }
  }
}
